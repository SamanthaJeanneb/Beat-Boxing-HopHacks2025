// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.2 (commit ).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { ClientConnected } from "./client_connected_reducer.ts";
export { ClientConnected };
import { ClientDisconnected } from "./client_disconnected_reducer.ts";
export { ClientDisconnected };
import { CreateLobby } from "./create_lobby_reducer.ts";
export { CreateLobby };
import { JoinLobby } from "./join_lobby_reducer.ts";
export { JoinLobby };
import { Increment } from "./increment_reducer.ts";
export { Increment };

// Import and reexport all table handle types
import { LobbyTableHandle } from "./lobby_table.ts";
export { LobbyTableHandle };
import { UserTableHandle } from "./user_table.ts";
export { UserTableHandle };

// Import and reexport all types
import { Lobby } from "./lobby_type.ts";
export { Lobby };
import { User } from "./user_type.ts";
export { User };

const REMOTE_MODULE = {
  tables: {
    lobby: {
      tableName: "lobby",
      rowType: Lobby.getTypeScriptAlgebraicType(),
      primaryKey: "code",
      primaryKeyInfo: {
        colName: "code",
        colType: Lobby.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    user: {
      tableName: "user",
      rowType: User.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
      primaryKeyInfo: {
        colName: "identity",
        colType: User.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
  },
  reducers: {
    client_connected: {
      reducerName: "client_connected",
      argsType: ClientConnected.getTypeScriptAlgebraicType(),
    },
    client_disconnected: {
      reducerName: "client_disconnected",
      argsType: ClientDisconnected.getTypeScriptAlgebraicType(),
    },
    create_lobby: {
      reducerName: "create_lobby",
      argsType: CreateLobby.getTypeScriptAlgebraicType(),
    },
    join_lobby: {
      reducerName: "join_lobby",
      argsType: JoinLobby.getTypeScriptAlgebraicType(),
    },
    increment: {
      reducerName: "increment",
      argsType: Increment.getTypeScriptAlgebraicType(),
    },
  },
  versionInfo: {
    cliVersion: "1.3.2",
  },
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

export type Reducer = never
| { name: "ClientConnected", args: ClientConnected }
| { name: "ClientDisconnected", args: ClientDisconnected }
| { name: "CreateLobby", args: CreateLobby }
| { name: "JoinLobby", args: JoinLobby }
| { name: "Increment", args: Increment }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  onClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("client_connected", callback);
  }

  removeOnClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("client_connected", callback);
  }

  onClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("client_disconnected", callback);
  }

  removeOnClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("client_disconnected", callback);
  }

  createLobby(code: string) {
    const __args = { code };
    let __writer = new BinaryWriter(1024);
    CreateLobby.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("create_lobby", __argsBuffer, this.setCallReducerFlags.createLobbyFlags);
  }

  onCreateLobby(callback: (ctx: ReducerEventContext, code: string) => void) {
    this.connection.onReducer("create_lobby", callback);
  }

  removeOnCreateLobby(callback: (ctx: ReducerEventContext, code: string) => void) {
    this.connection.offReducer("create_lobby", callback);
  }

  joinLobby(code: string) {
    const __args = { code };
    let __writer = new BinaryWriter(1024);
    JoinLobby.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("join_lobby", __argsBuffer, this.setCallReducerFlags.joinLobbyFlags);
  }

  onJoinLobby(callback: (ctx: ReducerEventContext, code: string) => void) {
    this.connection.onReducer("join_lobby", callback);
  }

  removeOnJoinLobby(callback: (ctx: ReducerEventContext, code: string) => void) {
    this.connection.offReducer("join_lobby", callback);
  }

  increment(code: string) {
    const __args = { code };
    let __writer = new BinaryWriter(1024);
    Increment.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("increment", __argsBuffer, this.setCallReducerFlags.incrementFlags);
  }

  onIncrement(callback: (ctx: ReducerEventContext, code: string) => void) {
    this.connection.onReducer("increment", callback);
  }

  removeOnIncrement(callback: (ctx: ReducerEventContext, code: string) => void) {
    this.connection.offReducer("increment", callback);
  }

}

export class SetReducerFlags {
  createLobbyFlags: CallReducerFlags = 'FullUpdate';
  createLobby(flags: CallReducerFlags) {
    this.createLobbyFlags = flags;
  }

  joinLobbyFlags: CallReducerFlags = 'FullUpdate';
  joinLobby(flags: CallReducerFlags) {
    this.joinLobbyFlags = flags;
  }

  incrementFlags: CallReducerFlags = 'FullUpdate';
  increment(flags: CallReducerFlags) {
    this.incrementFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get lobby(): LobbyTableHandle {
    return new LobbyTableHandle(this.connection.clientCache.getOrCreateTable<Lobby>(REMOTE_MODULE.tables.lobby));
  }

  get user(): UserTableHandle {
    return new UserTableHandle(this.connection.clientCache.getOrCreateTable<User>(REMOTE_MODULE.tables.user));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
